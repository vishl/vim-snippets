priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
}
else {
	${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ci "console.info" b
console.info(${1:"${2:value}"});
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.debug" b
console.debug(${1:"${2:value}"});
endsnippet

snippet cprof "console.profile" b
console.profile("${1:label}");
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:"${2:value}"});
endsnippet

snippet ctime "console.time" b
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp("${1:label}");
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn" b
console.warn(${1:"${2:value}"});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

# snippet req "require an AMD module"
# require([${1:'dependencies'}], ${2:callback});
# endsnippet

snippet globals
/*globals App, Backbone, _, JST, Utils*/
endsnippet

snippet View "Parse View"
App.Views.$1 = Parse.View.extend({
  initialize:function(){
    _.bindAll(this, 'render');
    this.template = _.template($("#${2:${1/[A-Z]/\l$0/g}-template}").html());
  },

  render:function(){
    this.$el.html(this.template(${3:{model:this.model.toJSON()}}));

    this.delegateEvents();
  },

});
endsnippet

snippet View "Backbone View"
App.Views.$1 = Backbone.View.extend({
  _className : "$1",
  events:{
  },

  initialize:function(){
    this.listenTo(this.model, 'sync', this.render);
    this.model.fetch();
  },

  render:function(){
    this.$el.html(JST['backbone/templates/$2']({model:this.model}));

    this.delegateEvents();
  },
});
endsnippet

snippet Cloud "Parse Cloud Function Definition"
Parse.Cloud.define("$1", function(request,response){
  $2
  var functions = [];
  callNext(functions);
});
endsnippet

snippet Cloud "Parse Cloud Function Invocation"
Parse.Cloud.run('$1', {$2}, {
  success:function(result){
  },
  error:function(error){
  }
});
endsnippet

snippet Cloud "Parse Cloud Before Save"
Parse.Cloud.beforeSave("$1", function(request, response) {
  $2
  response.success();
});
endsnippet

snippet Model "Backbone Model"
App.Models.$1 = Backbone.Model.extend({
  _className : '$1',
  autoParseKeys:function(){
    return [
    ];
  },
  parse:function(data){
    data = Backbone.Model.prototype.parse.apply(this,arguments);
    return data;
  },
  url:function(){
    return "/api/";
  },
});

App.Collections.$1Collection = Backbone.Collection.extend({
  _className : '$1Collection',
  model : App.Models.$1,
});
endsnippet

snippet Model "Backbone Model React"
var Backbone = require('../backbone_extensions');
var globals = require('../globals');

var $1 = Backbone.Model.extend({
  _className : '$1',
  urlRoot: function(){return globals.url + "/api/${2:${1/./\l$0/}s}"; },
  // autoParseKeys:function(){
  //   return [
  //   ];
  // },
  // parse:function(data){
  //   data = Backbone.Model.prototype.parse.apply(this,arguments);
  //   return data;
  // },
});

var $1Collection = Backbone.Collection.extend({
  _className : '$1Collection',
  model : $1,
  url: function(){ return globals.url + "/api/${2:${1/./\l$0/}s}"; },
});

exports.$1 = $1;
exports.$1Collection = $1Collection;


endsnippet

snippet query
var q = new Parse.Query("$1");
q.equalTo("$2", $3);
q.find({
  useMasterKey:true,
  success:function(results){
	$4
  },
  error:function(){
	response.error("Server error");
  },
});
endsnippet

snippet Component "React Component" b
class $1 extends React.Component {
  render(){
    return (
      <View>
        $2
      </View>
    );
  }
}
endsnippet

snippet Component "Library Component"
'use strict';

var React = require('react-native');
var Bridge = require('NativeModules').QTReactBridge;
var RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');
var _ = require('underscore');
var GS = require('./globalStyles');
var globalStyles = GS.styles;
var colors = GS.colors;
var globals = require('./globals');
var Models = require('./models');

var {
  View,
  // Image,
  // ListView,
  // TouchableHighlight,
} = React;

var styles = React.StyleSheet.create({

});

class $1 extends React.Component {
  constructor(){
    super();
    this.viewName = "$1";
  }

  render(){
    return (
      <View>
        
      </View>
    );
  }
}

module.exports = $1;
endsnippet

snippet Component "React Controller" b
'use strict';

var React = require('react-native');
var Bridge = require('NativeModules').QTReactBridge;
var RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');
var _ = require('underscore');
var GS = require('${1:.}/globalStyles');
var globalStyles = GS.styles;
var colors = GS.colors;
var globals = require('$1/globals');
var Models = require('$1/models');
var OrangePage = require('$1/orange_page');
var QTController = require('$1/qt_controller.js');
var QTStyleSheet = require('$1/qt_stylesheet.js');

var {
  View,
  // Image,
  // ListView,
  // TouchableHighlight,
} = React;

class $2 extends QTController {
  constructor(){
    super();
    this.viewName = "$2";
  }

  render(){
    return (
      <OrangePage>
        $3
      </OrangePage>
    );
  }
}

var styles = QTStyleSheet.create({

});


module.exports = $2;

endsnippet

snippet View "React View"
<View>
</View>
endsnippet

snippet st "React Style"
style={${1:styles.}}
endsnippet

snippet T "React Text"
<GS.QTText style={$2}>$1</GS.QTText>
endsnippet
snippet R "React Text Regular"
<GS.QTTextR style={$2}>$1</GS.QTTextR>
endsnippet
snippet S "React Text Semibold"
<GS.QTTextS style={$2}>$1</GS.QTTextS>
endsnippet
snippet < "React Tag"
<${1:View}>
  $2
</$1>
endsnippet
snippet <s "React Tag With Style"
<${1:View} style={$2}>
  $3
</$1>
endsnippet
snippet img "React Image"
<Image
  style={styles.$2}
  source={{uri:globals.imageHost+$1}}
  />
endsnippet

snippet styles "React Styles" b
var styles = React.StyleSheet.create({
  $1
});
endsnippet

snippet react "React requires"
'use strict';

var React = require('react-native');
var GS = require('./globalStyles');
var globalStyles = GS.styles;
var colors = GS.colors;
var Bridge = require('NativeModules').QTReactBridge;
var RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');
var _ = require('underscore');
var globals = require('./globals');
var Models = require('./models');

var {
  Text,
  View,
  Image,
  ListView,
  TouchableHighlight,
} = React;

endsnippet

snippet req "require" b
var `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet push "React Push" b
this.props.navigator.push({
  component: $1,
  title: '$2',
  passProps: {$3}
});
endsnippet

snippet cen "Center CSS" b
justifyContent:'center',
alignItems:'center',
endsnippet

snippet ibd "Interstitial Button Debounce"
<InterstitialButtonDebounce mainTitle="$1" secondaryTitle="$2" onPress={(button, enableTap)=>this.tapped(button, enableTap)} />
endsnippet

# vim:ft=snippets:
